apiVersion: v1
kind: Service                    # Type of kubernetes resource
metadata:
  name: goapp-service      # Name of the resource
spec:
  type: ClusterIP
  ports:                         # Take incoming HTTP requests on port 9090 and forward them to the targetPort of 8080
    - name: http
      port: 8080
      protocol: TCP
      # targetPort: http
  selector:
    app: go-app   # Map any pod with name go-app to this service
---
apiVersion: apps/v1
kind: Deployment                 # Type of Kubernetes resource
metadata:
  name: goapp-deploy           # Name of the Kubernetes resource
spec:
  replicas: 1                    # Number of pods to run at any given time
  selector:
    matchLabels:
      app: go-app                # This deployment applies to any Pods matching the specified label
  template:                      # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels:                    # The labels that will be applied to all of the pods in this deployment
        app: go-app 
    spec:                        # Spec for the container which will run in the Pod
      containers:
      - name: go-app
        image: docker-registry.dhc:5000/k8s-go-app:1.0.0
        imagePullPolicy: Always
        ports:
          - containerPort: 8080  # Should match the port number that the Go application listens on
        livenessProbe:           # To check the health of the Pod
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:          # To check if the Pod is ready or not
          httpGet:
            path: /readiness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 1  
